use clap::Parser;
use clio::OutputPath;
use anyhow::{Result};

#[derive(Parser, Debug)]
pub struct ExploitArgs {
    poc: String,

    #[clap(short, long)]
    rpc_url: String,

    #[clap(short, long)]
    block_number: Option<u64>,

    /// Generate a zkp through Bonsai, should set BONSAI_API_URL and BONSAI_API_KEY environment variables
    #[clap(short, long, default_value_t = false)]
    pub prove: bool,

    /// Output file 
    #[clap(long, short, value_parser, default_value = "proof.zkp")]
    output: OutputPath,
}

impl ExploitArgs {
    pub async fn run(self) -> Result<()> {
        let poc_runtime_bytecode = compile_poc(self.poc)?;
        let provider = try_get_http_provider(self.rpc_url)?;
        let block_id = match self.block_number {
            Some(n) => BlockNumber::from(n),
            None => BlockNumber::Safe,
        };
        let block = provider.get_block(block_id).await?;
        
        let block = block.expect("cound not found block");
        println!("Block Number: {}", block.number.unwrap());
        Ok(())
    }
}
