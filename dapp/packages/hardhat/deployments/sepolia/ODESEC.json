{
  "address": "0xb20d232d14428767b784c55879dc4E15Fe617c06",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "contract IRiscZeroVerifier",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_imageId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "domain",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ProjectAdded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAGIC",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_domain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_contact",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "_contracts",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "receipt",
          "type": "bytes"
        }
      ],
      "name": "addProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "getProjectList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "contracts",
              "type": "address[]"
            },
            {
              "internalType": "string",
              "name": "domain",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "contact",
              "type": "string"
            }
          ],
          "internalType": "struct ODESEC.ProjectData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "imageId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "domain",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "makeChallenge",
      "outputs": [
        {
          "internalType": "bytes20",
          "name": "",
          "type": "bytes20"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_domain",
          "type": "string"
        }
      ],
      "name": "projectIdOfDomain",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "projectIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "projects",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "domain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "contact",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalProjects",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_imageId",
          "type": "bytes32"
        }
      ],
      "name": "updateImageId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "contact",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "contracts",
          "type": "address[]"
        }
      ],
      "name": "updateProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "contract IRiscZeroVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x50318f84a66c17cbcb487656762d2283f77723706e6772b7ea05e8b1a860591d",
  "receipt": {
    "to": null,
    "from": "0x7fDf85917BAf7E5c3f06AdF59506eD3E4201c43B",
    "contractAddress": "0xb20d232d14428767b784c55879dc4E15Fe617c06",
    "transactionIndex": 55,
    "gasUsed": "1335023",
    "logsBloom": "0x
    "blockHash": "0xfede044261818618cb3ba0a9c0ea979c2c750e9679fce705d6197af25b4cab0e",
    "transactionHash": "0x50318f84a66c17cbcb487656762d2283f77723706e6772b7ea05e8b1a860591d",
    "logs": [],
    "blockNumber": 5725278,
    "cumulativeGasUsed": "8481008",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7fDf85917BAf7E5c3f06AdF59506eD3E4201c43B",
    "0x5A5A08A118E11A4FE56D5c7cc752aAb7d45330f5",
    "0xb5564c4222e90c1cd6384306a262edc0cd0ddb8443d930f95f202e13c81b25b3"
  ],
  "numDeployments": 1,
  "solcInputHash": "042a57bbf236d7c5a3f27965dc35ad75",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract IRiscZeroVerifier\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_imageId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ProjectAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAGIC\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_domain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contact\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_contracts\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"receipt\",\"type\":\"bytes\"}],\"name\":\"addProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getProjectList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contact\",\"type\":\"string\"}],\"internalType\":\"struct ODESEC.ProjectData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imageId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"makeChallenge\",\"outputs\":[{\"internalType\":\"bytes20\",\"name\":\"\",\"type\":\"bytes20\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_domain\",\"type\":\"string\"}],\"name\":\"projectIdOfDomain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"projectIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contact\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalProjects\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_imageId\",\"type\":\"bytes32\"}],\"name\":\"updateImageId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"contact\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"}],\"name\":\"updateProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contract IRiscZeroVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"imageId()\":{\"notice\":\"Image ID of the only zkVM binary to accept verification from.\"},\"projectIdOfDomain(string)\":{\"notice\":\"get the projectId by domain, if the domain is not registered, return 0\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ODESEC.sol\":\"ODESEC\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ODESEC.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\n// Useful for debugging. Remove when deploying to a live network.\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\nimport {IRiscZeroVerifier} from \\\"risc0/IRiscZeroVerifier.sol\\\";\\r\\nimport {Strings} from \\\"openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract ODESEC {\\r\\n    IRiscZeroVerifier public verifier;\\r\\n    /// @notice Image ID of the only zkVM binary to accept verification from.\\r\\n    bytes32 public imageId;\\r\\n    // State Variables\\r\\n    address public immutable owner;\\r\\n    uint256 public totalProjects;\\r\\n    bytes public constant MAGIC = \\\"ODSEC\\\";\\r\\n\\r\\n    event ProjectAdded(uint256 projectId, string domain, address owner);\\r\\n\\r\\n    struct ProjectData {\\r\\n        address owner;\\r\\n        address[] contracts;\\r\\n        string domain;\\r\\n        string contact;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => ProjectData) public projects;\\r\\n    mapping(bytes32 => uint256) public projectIds;\\r\\n\\r\\n    // Constructor: Called once on contract deployment\\r\\n    // Check packages/hardhat/deploy/00_deploy_your_contract.ts\\r\\n    constructor(address _owner, IRiscZeroVerifier _verifier, bytes32 _imageId) {\\r\\n        owner = _owner;\\r\\n        verifier = _verifier;\\r\\n        imageId = _imageId;\\r\\n    }\\r\\n\\r\\n    modifier isOwner() {\\r\\n        // msg.sender: predefined variable that represents address of the account that called the current function\\r\\n        require(msg.sender == owner, \\\"Not the Owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function updateImageId(bytes32 _imageId) public isOwner {\\r\\n        imageId = _imageId;\\r\\n    }\\r\\n\\r\\n    function addProject(\\r\\n        string memory _domain,\\r\\n        string memory _contact,\\r\\n        address[] memory _contracts,\\r\\n        address _owner,\\r\\n        bytes memory receipt\\r\\n    ) public {\\r\\n        (bytes memory journal, bytes32 postStateDigest, bytes memory seal) =\\r\\n            abi.decode(receipt, (bytes, bytes32, bytes));\\r\\n\\r\\n        require(_owner != address(0), \\\"Invalid owner\\\");\\r\\n        require(bytes(_domain).length > 3, \\\"Invalid domain\\\");\\r\\n        require(projectIdOfDomain(_domain) == 0, \\\"Project already exists\\\");\\r\\n        require(verifier.verify(seal, imageId, postStateDigest, sha256(journal)));\\r\\n\\r\\n        bytes20 challenge = makeChallenge(_domain, _owner);\\r\\n        string memory challengeDomain = string.concat(challengeToHex(challenge), \\\".\\\", _domain);\\r\\n        require(Strings.equal(challengeDomain, string(journal)), \\\"Invalid Challenge\\\");\\r\\n        totalProjects += 1;\\r\\n        uint256 projectId = totalProjects;\\r\\n        projects[projectId] = ProjectData(_owner, _contracts, _domain, _contact);\\r\\n        projectIds[keccak256(bytes(_domain))] = projectId;\\r\\n        emit ProjectAdded(projectId, _domain, _owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * get the projectId by domain, if the domain is not registered, return 0\\r\\n     */\\r\\n    function projectIdOfDomain(string memory _domain) public view returns (uint256) {\\r\\n        return projectIds[keccak256(bytes(_domain))];\\r\\n    }\\r\\n\\r\\n    function updateProject(uint256 projectId, string memory contact, address[] memory contracts) public {\\r\\n        ProjectData storage project = projects[projectId];\\r\\n        require(msg.sender == project.owner, \\\"Only owner can update project\\\");\\r\\n        project.contact = contact;\\r\\n        project.contracts = contracts;\\r\\n    }\\r\\n\\r\\n    function getProjectList(uint256 limit, uint256 offset) public view returns (ProjectData[] memory) {\\r\\n        uint256 count = limit > totalProjects - offset ? totalProjects - offset : limit;\\r\\n        ProjectData[] memory _projects = new ProjectData[](count);\\r\\n        offset += 1;\\r\\n        for (uint256 i = 0; i < count; i++) {\\r\\n            _projects[i] = projects[offset + i];\\r\\n        }\\r\\n        return _projects;\\r\\n    }\\r\\n\\r\\n    function makeChallenge(string memory domain, address _owner) public pure returns (bytes20) {\\r\\n        return bytes20(keccak256(abi.encodePacked(MAGIC, domain, _owner)));\\r\\n    }\\r\\n\\r\\n    function challengeToHex(bytes20 data) internal pure returns (string memory) {\\r\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\r\\n\\r\\n        bytes memory str = new bytes(40);\\r\\n        for (uint256 i = 0; i < 20; i++) {\\r\\n            str[i * 2] = alphabet[uint8(data[i] >> 4)];\\r\\n            str[i * 2 + 1] = alphabet[uint8(data[i] & 0x0f)];\\r\\n        }\\r\\n        return string(str);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x81dfd399ee536a9eba7b372df990bfeb029cea8833855f1fa6b335a46585c8c2\",\"license\":\"MIT\"},\"openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {Math} from \\\"./math/Math.sol\\\";\\r\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\r\\n    uint8 private constant ADDRESS_LENGTH = 20;\\r\\n\\r\\n    /**\\r\\n     * @dev The `value` string doesn't fit in the specified `length`.\\r\\n     */\\r\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        unchecked {\\r\\n            uint256 length = Math.log10(value) + 1;\\r\\n            string memory buffer = new string(length);\\r\\n            uint256 ptr;\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                ptr := add(buffer, add(32, length))\\r\\n            }\\r\\n            while (true) {\\r\\n                ptr--;\\r\\n                /// @solidity memory-safe-assembly\\r\\n                assembly {\\r\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\r\\n                }\\r\\n                value /= 10;\\r\\n                if (value == 0) break;\\r\\n            }\\r\\n            return buffer;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\r\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        unchecked {\\r\\n            return toHexString(value, Math.log256(value) + 1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        uint256 localValue = value;\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\r\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\r\\n            localValue >>= 4;\\r\\n        }\\r\\n        if (localValue != 0) {\\r\\n            revert StringsInsufficientHexLength(value, length);\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\r\\n     * representation.\\r\\n     */\\r\\n    function toHexString(address addr) internal pure returns (string memory) {\\r\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the two strings are equal.\\r\\n     */\\r\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\r\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x53da138fbc253114bcb7593eff7a23bdffdfd1392137cd59e2dd90e423cb5f92\",\"license\":\"MIT\"},\"openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary Math {\\r\\n    /**\\r\\n     * @dev Muldiv operation overflow.\\r\\n     */\\r\\n    error MathOverflowedMulDiv();\\r\\n\\r\\n    enum Rounding {\\r\\n        Floor, // Toward negative infinity\\r\\n        Ceil, // Toward positive infinity\\r\\n        Trunc, // Toward zero\\r\\n        Expand // Away from zero\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a > b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two numbers. The result is rounded towards\\r\\n     * zero.\\r\\n     */\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow.\\r\\n        return (a & b) + (a ^ b) / 2;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the ceiling of the division of two numbers.\\r\\n     *\\r\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\r\\n     * of rounding towards zero.\\r\\n     */\\r\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (b == 0) {\\r\\n            // Guarantee the same behavior as in a regular Solidity division.\\r\\n            return a / b;\\r\\n        }\\r\\n\\r\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\r\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\r\\n     * denominator == 0.\\r\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\r\\n     * Uniswap Labs also under MIT license.\\r\\n     */\\r\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\r\\n        unchecked {\\r\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\r\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\r\\n            // variables such that product = prod1 * 2^256 + prod0.\\r\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\r\\n            uint256 prod1; // Most significant 256 bits of the product\\r\\n            assembly {\\r\\n                let mm := mulmod(x, y, not(0))\\r\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n            }\\r\\n\\r\\n            // Handle non-overflow cases, 256 by 256 division.\\r\\n            if (prod1 == 0) {\\r\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\r\\n                // The surrounding unchecked block does not change this fact.\\r\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\r\\n                return prod0 / denominator;\\r\\n            }\\r\\n\\r\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\r\\n            if (denominator <= prod1) {\\r\\n                revert MathOverflowedMulDiv();\\r\\n            }\\r\\n\\r\\n            ///////////////////////////////////////////////\\r\\n            // 512 by 256 division.\\r\\n            ///////////////////////////////////////////////\\r\\n\\r\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\r\\n            uint256 remainder;\\r\\n            assembly {\\r\\n                // Compute remainder using mulmod.\\r\\n                remainder := mulmod(x, y, denominator)\\r\\n\\r\\n                // Subtract 256 bit number from 512 bit number.\\r\\n                prod1 := sub(prod1, gt(remainder, prod0))\\r\\n                prod0 := sub(prod0, remainder)\\r\\n            }\\r\\n\\r\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\r\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\r\\n\\r\\n            uint256 twos = denominator & (0 - denominator);\\r\\n            assembly {\\r\\n                // Divide denominator by twos.\\r\\n                denominator := div(denominator, twos)\\r\\n\\r\\n                // Divide [prod1 prod0] by twos.\\r\\n                prod0 := div(prod0, twos)\\r\\n\\r\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\r\\n                twos := add(div(sub(0, twos), twos), 1)\\r\\n            }\\r\\n\\r\\n            // Shift in bits from prod1 into prod0.\\r\\n            prod0 |= prod1 * twos;\\r\\n\\r\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\r\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\r\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\r\\n            uint256 inverse = (3 * denominator) ^ 2;\\r\\n\\r\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\r\\n            // works in modular arithmetic, doubling the correct bits in each step.\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\r\\n\\r\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\r\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\r\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\r\\n            // is no longer required.\\r\\n            result = prod0 * inverse;\\r\\n            return result;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\r\\n     */\\r\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\r\\n        uint256 result = mulDiv(x, y, denominator);\\r\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\r\\n            result += 1;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\r\\n     * towards zero.\\r\\n     *\\r\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\r\\n     */\\r\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\r\\n        //\\r\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\r\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\r\\n        //\\r\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\r\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\r\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\r\\n        //\\r\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\r\\n        uint256 result = 1 << (log2(a) >> 1);\\r\\n\\r\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\r\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\r\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\r\\n        // into the expected uint128 result.\\r\\n        unchecked {\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            return min(result, a / result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\r\\n     */\\r\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = sqrt(a);\\r\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 128;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                value >>= 8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 4 > 0) {\\r\\n                value >>= 4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 2 > 0) {\\r\\n                value >>= 2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 1 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log2(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >= 10 ** 64) {\\r\\n                value /= 10 ** 64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >= 10 ** 32) {\\r\\n                value /= 10 ** 32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >= 10 ** 16) {\\r\\n                value /= 10 ** 16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >= 10 ** 8) {\\r\\n                value /= 10 ** 8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >= 10 ** 4) {\\r\\n                value /= 10 ** 4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >= 10 ** 2) {\\r\\n                value /= 10 ** 2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >= 10 ** 1) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log10(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     *\\r\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\r\\n     */\\r\\n    function log256(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log256(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\r\\n     */\\r\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\r\\n        return uint8(rounding) % 2 == 1;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2c5cdfbc8308c34f76fc8fde760a72890e1178aedbeb3651662f177a2efe8e02\",\"license\":\"MIT\"},\"openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Standard signed math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary SignedMath {\\r\\n    /**\\r\\n     * @dev Returns the largest of two signed numbers.\\r\\n     */\\r\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\r\\n        return a > b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two signed numbers.\\r\\n     */\\r\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two signed numbers without overflow.\\r\\n     * The result is rounded towards zero.\\r\\n     */\\r\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\r\\n        // Formula from the book \\\"Hacker's Delight\\\"\\r\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\r\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the absolute unsigned value of a signed value.\\r\\n     */\\r\\n    function abs(int256 n) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            // must be unchecked in order to support `n = type(int256).min`\\r\\n            return uint256(n >= 0 ? n : -n);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd49b8824c2908c601bb2aa619e1331672c1d46f743bac0e23997766ea8bc16eb\",\"license\":\"MIT\"},\"risc0/IRiscZeroVerifier.sol\":{\"content\":\"// Copyright 2024 RISC Zero, Inc.\\r\\n//\\r\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n// you may not use this file except in compliance with the License.\\r\\n// You may obtain a copy of the License at\\r\\n//\\r\\n//     http://www.apache.org/licenses/LICENSE-2.0\\r\\n//\\r\\n// Unless required by applicable law or agreed to in writing, software\\r\\n// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n// See the License for the specific language governing permissions and\\r\\n// limitations under the License.\\r\\n//\\r\\n// SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n/// @notice Public claims about a zkVM guest execution, such as the journal committed to by the guest.\\r\\n/// @dev Also includes important information such as the exit code and the starting and ending system\\r\\n/// state (i.e. the state of memory). `ReceiptClaim` is a \\\"Merkle-ized struct\\\" supporting\\r\\n/// partial openings of the underlying fields from a hash commitment to the full structure.\\r\\nstruct ReceiptClaim {\\r\\n    /// @notice Digest of the SystemState just before execution has begun.\\r\\n    bytes32 preStateDigest;\\r\\n    /// @notice Digest of the SystemState just after execution has completed.\\r\\n    bytes32 postStateDigest;\\r\\n    /// @notice The exit code for the execution.\\r\\n    ExitCode exitCode;\\r\\n    /// @notice A digest of the input to the guest.\\r\\n    /// @dev This field is currently unused and must be set to the zero digest.\\r\\n    bytes32 input;\\r\\n    /// @notice Digest of the Output of the guest, including the journal\\r\\n    /// and assumptions set during execution.\\r\\n    bytes32 output;\\r\\n}\\r\\n\\r\\nlibrary ReceiptClaimLib {\\r\\n    bytes32 constant TAG_DIGEST = sha256(\\\"risc0.ReceiptClaim\\\");\\r\\n\\r\\n    function digest(ReceiptClaim memory claim) internal pure returns (bytes32) {\\r\\n        return sha256(\\r\\n            abi.encodePacked(\\r\\n                TAG_DIGEST,\\r\\n                // down\\r\\n                claim.input,\\r\\n                claim.preStateDigest,\\r\\n                claim.postStateDigest,\\r\\n                claim.output,\\r\\n                // data\\r\\n                uint32(claim.exitCode.system) << 24,\\r\\n                uint32(claim.exitCode.user) << 24,\\r\\n                // down.length\\r\\n                uint16(4) << 8\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice Exit condition indicated by the zkVM at the end of the guest execution.\\r\\n/// @dev Exit codes have a \\\"system\\\" part and a \\\"user\\\" part. Semantically, the system part is set to\\r\\n/// indicate the type of exit (e.g. halt, pause, or system split) and is directly controlled by the\\r\\n/// zkVM. The user part is an exit code, similar to exit codes used in Linux, chosen by the guest\\r\\n/// program to indicate additional information (e.g. 0 to indicate success or 1 to indicate an\\r\\n/// error).\\r\\nstruct ExitCode {\\r\\n    SystemExitCode system;\\r\\n    uint8 user;\\r\\n}\\r\\n\\r\\n/// @notice Exit condition indicated by the zkVM at the end of the execution covered by this proof.\\r\\n/// @dev\\r\\n/// `Halted` indicates normal termination of a program with an interior exit code returned from the\\r\\n/// guest program. A halted program cannot be resumed.\\r\\n///\\r\\n/// `Paused` indicates the execution ended in a paused state with an interior exit code set by the\\r\\n/// guest program. A paused program can be resumed such that execution picks up where it left\\r\\n/// of, with the same memory state.\\r\\n///\\r\\n/// `SystemSplit` indicates the execution ended on a host-initiated system split. System split is\\r\\n/// mechanism by which the host can temporarily stop execution of the execution ended in a system\\r\\n/// split has no output and no conclusions can be drawn about whether the program will eventually\\r\\n/// halt. System split is used in continuations to split execution into individually provable segments.\\r\\nenum SystemExitCode {\\r\\n    Halted,\\r\\n    Paused,\\r\\n    SystemSplit\\r\\n}\\r\\n\\r\\n/// @notice Output field in the `ReceiptClaim`, committing to a claimed journal and assumptions list.\\r\\nstruct Output {\\r\\n    /// @notice Digest of the journal committed to by the guest execution.\\r\\n    bytes32 journalDigest;\\r\\n    /// @notice Digest of the ordered list of `ReceiptClaim` digests corresponding to the\\r\\n    /// calls to `env::verify` and `env::verify_integrity`.\\r\\n    /// @dev Verifying the integrity of a `Receipt` corresponding to a `ReceiptClaim` with a\\r\\n    /// non-empty assumptions list does not guarantee unconditionally any of the claims over the\\r\\n    /// guest execution (i.e. if the assumptions list is non-empty, then the journal digest cannot\\r\\n    /// be trusted to correspond to a genuine execution). The claims can be checked by additional\\r\\n    /// verifying a `Receipt` for every digest in the assumptions list.\\r\\n    bytes32 assumptionsDigest;\\r\\n}\\r\\n\\r\\nlibrary OutputLib {\\r\\n    bytes32 constant TAG_DIGEST = sha256(\\\"risc0.Output\\\");\\r\\n\\r\\n    function digest(Output memory output) internal pure returns (bytes32) {\\r\\n        return sha256(\\r\\n            abi.encodePacked(\\r\\n                TAG_DIGEST,\\r\\n                // down\\r\\n                output.journalDigest,\\r\\n                output.assumptionsDigest,\\r\\n                // down.length\\r\\n                uint16(2) << 8\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A receipt attesting to the execution of a guest program.\\r\\n/// @dev A receipt contains two parts: a seal and a claim. The seal is a zero-knowledge proof\\r\\n/// attesting to knowledge of a zkVM execution resulting in the claim. The claim is a set of public\\r\\n/// outputs for the execution. Crucially, the claim includes the journal and the image ID. The\\r\\n/// image ID identifies the program that was executed, and the journal is the public data written\\r\\n/// by the program.\\r\\nstruct Receipt {\\r\\n    bytes seal;\\r\\n    ReceiptClaim claim;\\r\\n}\\r\\n\\r\\n/// @notice Verifier interface for RISC Zero receipts of execution.\\r\\ninterface IRiscZeroVerifier {\\r\\n    /// @notice Verify that the given seal is a valid RISC Zero proof of execution with the\\r\\n    ///     given image ID, post-state digest, and journal digest.\\r\\n    /// @dev This method additionally ensures that the input hash is all-zeros (i.e. no\\r\\n    /// committed input), the exit code is (Halted, 0), and there are no assumptions (i.e. the\\r\\n    /// receipt is unconditional).\\r\\n    /// @param seal The encoded cryptographic proof (i.e. SNARK).\\r\\n    /// @param imageId The identifier for the guest program.\\r\\n    /// @param postStateDigest A hash of the final memory state. Required to run the verifier, but\\r\\n    ///     otherwise can be left unconstrained for most use cases.\\r\\n    /// @param journalDigest The SHA-256 digest of the journal bytes.\\r\\n    /// @return true if the receipt passes the verification checks. The return code must be checked.\\r\\n    function verify(bytes calldata seal, bytes32 imageId, bytes32 postStateDigest, bytes32 journalDigest)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    /// @notice Verify that the given receipt is a valid RISC Zero receipt, ensuring the `seal` is\\r\\n    /// valid a cryptographic proof of the execution with the given `claim`.\\r\\n    /// @param receipt The receipt to be verified.\\r\\n    /// @return true if the receipt passes the verification checks. The return code must be checked.\\r\\n    function verify_integrity(Receipt calldata receipt) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xab19c099edd9a3c4017b60bc4d70446c47bfc648b4f23a29209b9a5d25197908\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516200172e3803806200172e83398101604081905261003191610078565b6001600160a01b03928316608052600080546001600160a01b03191692909316919091179091556001556100bb565b6001600160a01b038116811461007557600080fd5b50565b60008060006060848603121561008d57600080fd5b835161009881610060565b60208501519093506100a981610060565b80925050604084015190509250925092565b608051611650620000de600039600081816101e30152610a7401526116506000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063c08f382d11610066578063c08f382d14610223578063c182e72314610236578063c5fa21f914610256578063ef3f7dd51461026957600080fd5b80638da5cb5b146101de5780639c361e4e14610205578063ac2112be1461020e57600080fd5b80630f9817ee146100d4578063107046bd1461010a5780632b7ac3f31461012c578063499e3d95146101575780635e41813d1461017757806365883252146101a8575b600080fd5b6100e76100e2366004610e54565b610272565b6040516bffffffffffffffffffffffff1990911681526020015b60405180910390f35b61011d610118366004610ea2565b6102c5565b60405161010193929190610f0b565b60005461013f906001600160a01b031681565b6040516001600160a01b039091168152602001610101565b61016a610165366004610f4b565b610402565b6040516101019190610f6d565b61019b604051806040016040528060058152602001644f4453454360d81b81525081565b6040516101019190611053565b6101d06101b6366004611066565b805160209182012060009081526004909152604090205490565b604051908152602001610101565b61013f7f000000000000000000000000000000000000000000000000000000000000000081565b6101d060025481565b61022161021c36600461112a565b6106c0565b005b610221610231366004610ea2565b610a69565b6101d0610244366004610ea2565b60046020526000908152604090205481565b6102216102643660046111fc565b610ad6565b6101d060015481565b6000604051806040016040528060058152602001644f4453454360d81b81525083836040516020016102a693929190611269565b6040516020818303038152906040528051906020012090505b92915050565b600360205260009081526040902080546002820180546001600160a01b0390921692916102f1906112b4565b80601f016020809104026020016040519081016040528092919081815260200182805461031d906112b4565b801561036a5780601f1061033f5761010080835404028352916020019161036a565b820191906000526020600020905b81548152906001019060200180831161034d57829003601f168201915b50505050509080600301805461037f906112b4565b80601f01602080910402602001604051908101604052809291908181526020018280546103ab906112b4565b80156103f85780601f106103cd576101008083540402835291602001916103f8565b820191906000526020600020905b8154815290600101906020018083116103db57829003601f168201915b5050505050905083565b60606000826002546104149190611304565b8411610420578361042e565b8260025461042e9190611304565b905060008167ffffffffffffffff81111561044b5761044b610d6b565b6040519080825280602002602001820160405280156104b057816020015b61049d604051806080016040528060006001600160a01b031681526020016060815260200160608152602001606081525090565b8152602001906001900390816104695790505b5090506104be600185611317565b935060005b828110156106b757600360006104d98388611317565b81526020808201929092526040908101600020815160808101835281546001600160a01b03168152600182018054845181870281018701909552808552919492938584019390929083018282801561055a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161053c575b50505050508152602001600282018054610573906112b4565b80601f016020809104026020016040519081016040528092919081815260200182805461059f906112b4565b80156105ec5780601f106105c1576101008083540402835291602001916105ec565b820191906000526020600020905b8154815290600101906020018083116105cf57829003601f168201915b50505050508152602001600382018054610605906112b4565b80601f0160208091040260200160405190810160405280929190818152602001828054610631906112b4565b801561067e5780601f106106535761010080835404028352916020019161067e565b820191906000526020600020905b81548152906001019060200180831161066157829003601f168201915b5050505050815250508282815181106106995761069961132a565b602002602001018190525080806106af90611340565b9150506104c3565b50949350505050565b6000806000838060200190518101906106d9919061139e565b919450925090506001600160a01b03851661072b5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b21037bbb732b960991b60448201526064015b60405180910390fd5b600388511161076d5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b2103237b6b0b4b760911b6044820152606401610722565b61078b88805160209182012060009081526004909152604090205490565b156107d15760405162461bcd60e51b815260206004820152601660248201527550726f6a65637420616c72656164792065786973747360501b6044820152606401610722565b6000546001546040516001600160a01b0390921691636efef00991849186906002906107fe908a90611401565b602060405180830381855afa15801561081b573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061083e919061141d565b6040518563ffffffff1660e01b815260040161085d9493929190611436565b602060405180830381865afa15801561087a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089e9190611465565b6108a757600080fd5b60006108b38987610272565b905060006108c082610b68565b8a6040516020016108d2929190611487565b60405160208183030381529060405290506108ed8186610cca565b61092d5760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964204368616c6c656e676560781b6044820152606401610722565b6001600260008282546109409190611317565b92505081905550600060025490506040518060800160405280896001600160a01b031681526020018a81526020018c81526020018b8152506003600083815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010190805190602001906109d4929190610cf1565b50604082015160028201906109e99082611512565b50606082015160038201906109fe9082611512565b5090505080600460008d805190602001208152602001908152602001600020819055507f0c37be42d09c868de3d7b2154026972d847472b2d254f8f2f6a8f1be3a450e6a818c8a604051610a54939291906115d2565b60405180910390a15050505050505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ad15760405162461bcd60e51b815260206004820152600d60248201526c2737ba103a34329027bbb732b960991b6044820152606401610722565b600155565b600083815260036020526040902080546001600160a01b03163314610b3d5760405162461bcd60e51b815260206004820152601d60248201527f4f6e6c79206f776e65722063616e207570646174652070726f6a6563740000006044820152606401610722565b60038101610b4b8482611512565b508151610b619060018301906020850190610cf1565b5050505050565b604080518082018252601081526f181899199a1a9b1b9c1cb0b131b232b360811b60208201528151602880825260608281019094526000919060208201818036833701905050905060005b6014811015610cc257826004868360148110610bd157610bd161132a565b1a60f81b6001600160f81b031916901c60f81c60ff1681518110610bf757610bf761132a565b01602001516001600160f81b03191682610c12836002611603565b81518110610c2257610c2261132a565b60200101906001600160f81b031916908160001a90535082858260148110610c4c57610c4c61132a565b825191901a600f16908110610c6357610c6361132a565b01602001516001600160f81b03191682610c7e836002611603565b610c89906001611317565b81518110610c9957610c9961132a565b60200101906001600160f81b031916908160001a90535080610cba81611340565b915050610bb3565b509392505050565b600081518351148015610cea575081805190602001208380519060200120145b9392505050565b828054828255906000526020600020908101928215610d46579160200282015b82811115610d4657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610d11565b50610d52929150610d56565b5090565b5b80821115610d525760008155600101610d57565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610daa57610daa610d6b565b604052919050565b600067ffffffffffffffff821115610dcc57610dcc610d6b565b50601f01601f191660200190565b6000610ded610de884610db2565b610d81565b9050828152838383011115610e0157600080fd5b828260208301376000602084830101529392505050565b600082601f830112610e2957600080fd5b610cea83833560208501610dda565b80356001600160a01b0381168114610e4f57600080fd5b919050565b60008060408385031215610e6757600080fd5b823567ffffffffffffffff811115610e7e57600080fd5b610e8a85828601610e18565b925050610e9960208401610e38565b90509250929050565b600060208284031215610eb457600080fd5b5035919050565b60005b83811015610ed6578181015183820152602001610ebe565b50506000910152565b60008151808452610ef7816020860160208601610ebb565b601f01601f19169290920160200192915050565b6001600160a01b0384168152606060208201819052600090610f2f90830185610edf565b8281036040840152610f418185610edf565b9695505050505050565b60008060408385031215610f5e57600080fd5b50508035926020909101359150565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561104457898403603f19018652825180516001600160a01b0390811686528982015160808b8801819052815190880181905260a0880192918c01919086905b80821015610ffa57835183168552938d0193928d019260019190910190610fd8565b50505050888201518682038a8801526110138282610edf565b915050606080830151925086820381880152506110308183610edf565b978a01979550505091870191600101610f95565b50919998505050505050505050565b602081526000610cea6020830184610edf565b60006020828403121561107857600080fd5b813567ffffffffffffffff81111561108f57600080fd5b61109b84828501610e18565b949350505050565b600082601f8301126110b457600080fd5b8135602067ffffffffffffffff8211156110d0576110d0610d6b565b8160051b6110df828201610d81565b92835284810182019282810190878511156110f957600080fd5b83870192505b8483101561111f5761111083610e38565b825291830191908301906110ff565b979650505050505050565b600080600080600060a0868803121561114257600080fd5b853567ffffffffffffffff8082111561115a57600080fd5b61116689838a01610e18565b9650602088013591508082111561117c57600080fd5b61118889838a01610e18565b9550604088013591508082111561119e57600080fd5b6111aa89838a016110a3565b94506111b860608901610e38565b935060808801359150808211156111ce57600080fd5b508601601f810188136111e057600080fd5b6111ef88823560208401610dda565b9150509295509295909350565b60008060006060848603121561121157600080fd5b83359250602084013567ffffffffffffffff8082111561123057600080fd5b61123c87838801610e18565b9350604086013591508082111561125257600080fd5b5061125f868287016110a3565b9150509250925092565b6000845161127b818460208901610ebb565b84519083019061128f818360208901610ebb565b60609490941b6bffffffffffffffffffffffff19169301928352505060140192915050565b600181811c908216806112c857607f821691505b6020821081036112e857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156102bf576102bf6112ee565b808201808211156102bf576102bf6112ee565b634e487b7160e01b600052603260045260246000fd5b600060018201611352576113526112ee565b5060010190565b600082601f83011261136a57600080fd5b8151611378610de882610db2565b81815284602083860101111561138d57600080fd5b61109b826020830160208701610ebb565b6000806000606084860312156113b357600080fd5b835167ffffffffffffffff808211156113cb57600080fd5b6113d787838801611359565b94506020860151935060408601519150808211156113f457600080fd5b5061125f86828701611359565b60008251611413818460208701610ebb565b9190910192915050565b60006020828403121561142f57600080fd5b5051919050565b6080815260006114496080830187610edf565b6020830195909552506040810192909252606090910152919050565b60006020828403121561147757600080fd5b81518015158114610cea57600080fd5b60008351611499818460208801610ebb565b601760f91b90830190815283516114b7816001840160208801610ebb565b01600101949350505050565b601f82111561150d57600081815260208120601f850160051c810160208610156114ea5750805b601f850160051c820191505b81811015611509578281556001016114f6565b5050505b505050565b815167ffffffffffffffff81111561152c5761152c610d6b565b6115408161153a84546112b4565b846114c3565b602080601f831160018114611575576000841561155d5750858301515b600019600386901b1c1916600185901b178555611509565b600085815260208120601f198616915b828110156115a457888601518255948401946001909101908401611585565b50858210156115c25787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8381526060602082015260006115eb6060830185610edf565b905060018060a01b0383166040830152949350505050565b80820281158282048414176102bf576102bf6112ee56fea2646970667358221220e7372d3f4f8005d16f2101678a7f2d0dd3fd7f323b194a32a1d436d1dac3419064736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063c08f382d11610066578063c08f382d14610223578063c182e72314610236578063c5fa21f914610256578063ef3f7dd51461026957600080fd5b80638da5cb5b146101de5780639c361e4e14610205578063ac2112be1461020e57600080fd5b80630f9817ee146100d4578063107046bd1461010a5780632b7ac3f31461012c578063499e3d95146101575780635e41813d1461017757806365883252146101a8575b600080fd5b6100e76100e2366004610e54565b610272565b6040516bffffffffffffffffffffffff1990911681526020015b60405180910390f35b61011d610118366004610ea2565b6102c5565b60405161010193929190610f0b565b60005461013f906001600160a01b031681565b6040516001600160a01b039091168152602001610101565b61016a610165366004610f4b565b610402565b6040516101019190610f6d565b61019b604051806040016040528060058152602001644f4453454360d81b81525081565b6040516101019190611053565b6101d06101b6366004611066565b805160209182012060009081526004909152604090205490565b604051908152602001610101565b61013f7f000000000000000000000000000000000000000000000000000000000000000081565b6101d060025481565b61022161021c36600461112a565b6106c0565b005b610221610231366004610ea2565b610a69565b6101d0610244366004610ea2565b60046020526000908152604090205481565b6102216102643660046111fc565b610ad6565b6101d060015481565b6000604051806040016040528060058152602001644f4453454360d81b81525083836040516020016102a693929190611269565b6040516020818303038152906040528051906020012090505b92915050565b600360205260009081526040902080546002820180546001600160a01b0390921692916102f1906112b4565b80601f016020809104026020016040519081016040528092919081815260200182805461031d906112b4565b801561036a5780601f1061033f5761010080835404028352916020019161036a565b820191906000526020600020905b81548152906001019060200180831161034d57829003601f168201915b50505050509080600301805461037f906112b4565b80601f01602080910402602001604051908101604052809291908181526020018280546103ab906112b4565b80156103f85780601f106103cd576101008083540402835291602001916103f8565b820191906000526020600020905b8154815290600101906020018083116103db57829003601f168201915b5050505050905083565b60606000826002546104149190611304565b8411610420578361042e565b8260025461042e9190611304565b905060008167ffffffffffffffff81111561044b5761044b610d6b565b6040519080825280602002602001820160405280156104b057816020015b61049d604051806080016040528060006001600160a01b031681526020016060815260200160608152602001606081525090565b8152602001906001900390816104695790505b5090506104be600185611317565b935060005b828110156106b757600360006104d98388611317565b81526020808201929092526040908101600020815160808101835281546001600160a01b03168152600182018054845181870281018701909552808552919492938584019390929083018282801561055a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161053c575b50505050508152602001600282018054610573906112b4565b80601f016020809104026020016040519081016040528092919081815260200182805461059f906112b4565b80156105ec5780601f106105c1576101008083540402835291602001916105ec565b820191906000526020600020905b8154815290600101906020018083116105cf57829003601f168201915b50505050508152602001600382018054610605906112b4565b80601f0160208091040260200160405190810160405280929190818152602001828054610631906112b4565b801561067e5780601f106106535761010080835404028352916020019161067e565b820191906000526020600020905b81548152906001019060200180831161066157829003601f168201915b5050505050815250508282815181106106995761069961132a565b602002602001018190525080806106af90611340565b9150506104c3565b50949350505050565b6000806000838060200190518101906106d9919061139e565b919450925090506001600160a01b03851661072b5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b21037bbb732b960991b60448201526064015b60405180910390fd5b600388511161076d5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b2103237b6b0b4b760911b6044820152606401610722565b61078b88805160209182012060009081526004909152604090205490565b156107d15760405162461bcd60e51b815260206004820152601660248201527550726f6a65637420616c72656164792065786973747360501b6044820152606401610722565b6000546001546040516001600160a01b0390921691636efef00991849186906002906107fe908a90611401565b602060405180830381855afa15801561081b573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061083e919061141d565b6040518563ffffffff1660e01b815260040161085d9493929190611436565b602060405180830381865afa15801561087a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089e9190611465565b6108a757600080fd5b60006108b38987610272565b905060006108c082610b68565b8a6040516020016108d2929190611487565b60405160208183030381529060405290506108ed8186610cca565b61092d5760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964204368616c6c656e676560781b6044820152606401610722565b6001600260008282546109409190611317565b92505081905550600060025490506040518060800160405280896001600160a01b031681526020018a81526020018c81526020018b8152506003600083815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010190805190602001906109d4929190610cf1565b50604082015160028201906109e99082611512565b50606082015160038201906109fe9082611512565b5090505080600460008d805190602001208152602001908152602001600020819055507f0c37be42d09c868de3d7b2154026972d847472b2d254f8f2f6a8f1be3a450e6a818c8a604051610a54939291906115d2565b60405180910390a15050505050505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ad15760405162461bcd60e51b815260206004820152600d60248201526c2737ba103a34329027bbb732b960991b6044820152606401610722565b600155565b600083815260036020526040902080546001600160a01b03163314610b3d5760405162461bcd60e51b815260206004820152601d60248201527f4f6e6c79206f776e65722063616e207570646174652070726f6a6563740000006044820152606401610722565b60038101610b4b8482611512565b508151610b619060018301906020850190610cf1565b5050505050565b604080518082018252601081526f181899199a1a9b1b9c1cb0b131b232b360811b60208201528151602880825260608281019094526000919060208201818036833701905050905060005b6014811015610cc257826004868360148110610bd157610bd161132a565b1a60f81b6001600160f81b031916901c60f81c60ff1681518110610bf757610bf761132a565b01602001516001600160f81b03191682610c12836002611603565b81518110610c2257610c2261132a565b60200101906001600160f81b031916908160001a90535082858260148110610c4c57610c4c61132a565b825191901a600f16908110610c6357610c6361132a565b01602001516001600160f81b03191682610c7e836002611603565b610c89906001611317565b81518110610c9957610c9961132a565b60200101906001600160f81b031916908160001a90535080610cba81611340565b915050610bb3565b509392505050565b600081518351148015610cea575081805190602001208380519060200120145b9392505050565b828054828255906000526020600020908101928215610d46579160200282015b82811115610d4657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610d11565b50610d52929150610d56565b5090565b5b80821115610d525760008155600101610d57565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610daa57610daa610d6b565b604052919050565b600067ffffffffffffffff821115610dcc57610dcc610d6b565b50601f01601f191660200190565b6000610ded610de884610db2565b610d81565b9050828152838383011115610e0157600080fd5b828260208301376000602084830101529392505050565b600082601f830112610e2957600080fd5b610cea83833560208501610dda565b80356001600160a01b0381168114610e4f57600080fd5b919050565b60008060408385031215610e6757600080fd5b823567ffffffffffffffff811115610e7e57600080fd5b610e8a85828601610e18565b925050610e9960208401610e38565b90509250929050565b600060208284031215610eb457600080fd5b5035919050565b60005b83811015610ed6578181015183820152602001610ebe565b50506000910152565b60008151808452610ef7816020860160208601610ebb565b601f01601f19169290920160200192915050565b6001600160a01b0384168152606060208201819052600090610f2f90830185610edf565b8281036040840152610f418185610edf565b9695505050505050565b60008060408385031215610f5e57600080fd5b50508035926020909101359150565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561104457898403603f19018652825180516001600160a01b0390811686528982015160808b8801819052815190880181905260a0880192918c01919086905b80821015610ffa57835183168552938d0193928d019260019190910190610fd8565b50505050888201518682038a8801526110138282610edf565b915050606080830151925086820381880152506110308183610edf565b978a01979550505091870191600101610f95565b50919998505050505050505050565b602081526000610cea6020830184610edf565b60006020828403121561107857600080fd5b813567ffffffffffffffff81111561108f57600080fd5b61109b84828501610e18565b949350505050565b600082601f8301126110b457600080fd5b8135602067ffffffffffffffff8211156110d0576110d0610d6b565b8160051b6110df828201610d81565b92835284810182019282810190878511156110f957600080fd5b83870192505b8483101561111f5761111083610e38565b825291830191908301906110ff565b979650505050505050565b600080600080600060a0868803121561114257600080fd5b853567ffffffffffffffff8082111561115a57600080fd5b61116689838a01610e18565b9650602088013591508082111561117c57600080fd5b61118889838a01610e18565b9550604088013591508082111561119e57600080fd5b6111aa89838a016110a3565b94506111b860608901610e38565b935060808801359150808211156111ce57600080fd5b508601601f810188136111e057600080fd5b6111ef88823560208401610dda565b9150509295509295909350565b60008060006060848603121561121157600080fd5b83359250602084013567ffffffffffffffff8082111561123057600080fd5b61123c87838801610e18565b9350604086013591508082111561125257600080fd5b5061125f868287016110a3565b9150509250925092565b6000845161127b818460208901610ebb565b84519083019061128f818360208901610ebb565b60609490941b6bffffffffffffffffffffffff19169301928352505060140192915050565b600181811c908216806112c857607f821691505b6020821081036112e857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156102bf576102bf6112ee565b808201808211156102bf576102bf6112ee565b634e487b7160e01b600052603260045260246000fd5b600060018201611352576113526112ee565b5060010190565b600082601f83011261136a57600080fd5b8151611378610de882610db2565b81815284602083860101111561138d57600080fd5b61109b826020830160208701610ebb565b6000806000606084860312156113b357600080fd5b835167ffffffffffffffff808211156113cb57600080fd5b6113d787838801611359565b94506020860151935060408601519150808211156113f457600080fd5b5061125f86828701611359565b60008251611413818460208701610ebb565b9190910192915050565b60006020828403121561142f57600080fd5b5051919050565b6080815260006114496080830187610edf565b6020830195909552506040810192909252606090910152919050565b60006020828403121561147757600080fd5b81518015158114610cea57600080fd5b60008351611499818460208801610ebb565b601760f91b90830190815283516114b7816001840160208801610ebb565b01600101949350505050565b601f82111561150d57600081815260208120601f850160051c810160208610156114ea5750805b601f850160051c820191505b81811015611509578281556001016114f6565b5050505b505050565b815167ffffffffffffffff81111561152c5761152c610d6b565b6115408161153a84546112b4565b846114c3565b602080601f831160018114611575576000841561155d5750858301515b600019600386901b1c1916600185901b178555611509565b600085815260208120601f198616915b828110156115a457888601518255948401946001909101908401611585565b50858210156115c25787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8381526060602082015260006115eb6060830185610edf565b905060018060a01b0383166040830152949350505050565b80820281158282048414176102bf576102bf6112ee56fea2646970667358221220e7372d3f4f8005d16f2101678a7f2d0dd3fd7f323b194a32a1d436d1dac3419064736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "imageId()": {
        "notice": "Image ID of the only zkVM binary to accept verification from."
      },
      "projectIdOfDomain(string)": {
        "notice": "get the projectId by domain, if the domain is not registered, return 0"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/ODESEC.sol:ODESEC",
        "label": "verifier",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IRiscZeroVerifier)2021"
      },
      {
        "astId": 11,
        "contract": "contracts/ODESEC.sol:ODESEC",
        "label": "imageId",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 15,
        "contract": "contracts/ODESEC.sol:ODESEC",
        "label": "totalProjects",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 41,
        "contract": "contracts/ODESEC.sol:ODESEC",
        "label": "projects",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(ProjectData)36_storage)"
      },
      {
        "astId": 45,
        "contract": "contracts/ODESEC.sol:ODESEC",
        "label": "projectIds",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IRiscZeroVerifier)2021": {
        "encoding": "inplace",
        "label": "contract IRiscZeroVerifier",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(ProjectData)36_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ODESEC.ProjectData)",
        "numberOfBytes": "32",
        "value": "t_struct(ProjectData)36_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ProjectData)36_storage": {
        "encoding": "inplace",
        "label": "struct ODESEC.ProjectData",
        "members": [
          {
            "astId": 28,
            "contract": "contracts/ODESEC.sol:ODESEC",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 31,
            "contract": "contracts/ODESEC.sol:ODESEC",
            "label": "contracts",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 33,
            "contract": "contracts/ODESEC.sol:ODESEC",
            "label": "domain",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 35,
            "contract": "contracts/ODESEC.sol:ODESEC",
            "label": "contact",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}